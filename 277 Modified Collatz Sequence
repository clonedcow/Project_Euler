import java.util.*;

public class MyClass {
    public static void main(String args[]) {
        String pattern = "UDDDUdddDDUDDddDdDddDDUDDdUUDd";
        // String pattern = "DdDddUUdDD";
        
        // (a*end+c)/d
        long endCoefficient = 1;
        long constant = 0;
        long denominator = 1;
        for(int i = pattern.length()-1; i>=0; i--) {
            switch(pattern.charAt(i)) {
                case 'D':
                    endCoefficient*=3;
                    constant*=3;
                    break;
                case 'U':
                    endCoefficient*=3;
                    constant = 3*constant-2*denominator;
                    denominator*=4;
                    break;
                case 'd':
                    endCoefficient*=3;
                    constant = 3*constant+denominator;
                    denominator*=2;
                    break;
            }
        }
        
        System.out.println("("+endCoefficient+"*end+"+constant+")/"+denominator);
        // (205891132094649x+21110037246199)/4194304
        
        // 277 Eulercoin
        long BASE = endCoefficient%denominator;
        long MOD =  denominator;
        
        long oldMult = 0;
        long oldMod = MOD;
        long newMult = 1;
        long newMod = BASE;
        
        List<Long> mults = new ArrayList<>();
        mults.add(1L);
        List<Long> mods = new ArrayList<>();
        mods.add(BASE);
        while(newMod!=1) {
            long newestMod = (oldMod/newMod+1)*newMod-oldMod;
            long newestMult = (oldMod/newMod+1)*newMult-oldMult;
            System.out.println(newestMult+", "+newestMod);
            
            oldMod = newMod;
            oldMult = newMult;
            newMod = newestMod;
            newMult = newestMult;
            mods.add(newestMod);
            mults.add(newestMult);
        }
        
        long sol = 0;
        long rem = denominator-(constant%denominator);
        int multInd = 1;
        
        while(rem!=0) {
            long mult = mults.get(multInd);
            long mod = mods.get(multInd);
            if(rem>=mod) {
                sol += (rem/mod)*mult;
                rem -= (rem/mod)*mod;
            }
            multInd++;
        }
        
        System.out.println("equation solution = " + sol);
        
        // overflows
        // long endMin = (1000000000000000L*denominator-constant)/endCoefficient;
        // System.out.println("minimum ending number = " + endMin);
        
        // long end = endMin/denominator*denominator+sol;
        // System.out.println("end = " + end);
        // 22937809
        
        // long ans = (end*endCoefficient+constant)/denominator
        // 1125977393124310
        
        long ans = 1125977393124310L;
        for(int i=0; i<30; i++) {
            long mod = ans%3;
            if(mod == 0) {
                ans/=3;
                System.out.print("D");
            } else if(mod == 1) {
                ans = (4*ans+2)/3;
                System.out.print("U");
            } else {
                ans = (2*ans-1)/3;
                System.out.print("d");
            }
        }
    }
}
