List<Integer> primes;

private void genPrimes(int maxPrime) {
    primes = new ArrayList<>();
    boolean[] isComposite = new boolean[maxPrime+1];

    for(int testPrime = 2; testPrime<=maxPrime; testPrime++) {
        if(!isComposite[testPrime]) {
            primes.add(testPrime);
            for(int marker = testPrime*testPrime; marker<=maxPrime; marker+=testPrime) {
                isComposite[marker] = true;
            }
        }
    }
}

/////////////////////////////////////////
private static class PrimeFactorization {
        public Map<Integer,Integer> primeCounts;
        
        PrimeFactorization(int n) {
            primeCounts = new HashMap<>();
            
            int primeIndex = 0;
            int prime = 2;
            while(n!=1) {
                int primeCount = 0;
                while(n%prime == 0) {
                    n/=prime;
                    primeCount++;
                }
                if(primeCount>0) primeCounts.put(prime, primeCount);
                
                prime = primes.get(++primeIndex);
            }
        }
        
        public PrimeFactorization multiply(PrimeFactorization other) {
            for(Map.Entry<Integer,Integer> otherPrimeCount : other.primeCounts.entrySet()) {
                int prime = otherPrimeCount.getKey();
                Integer thisCount = this.primeCounts.get(prime);
                if(thisCount==null) thisCount = 0;
                this.primeCounts.put(prime, thisCount+otherPrimeCount.getValue());
            }
            return this;
        }
        
        public PrimeFactorization divide(PrimeFactorization other) {
            for(Map.Entry<Integer,Integer> otherPrimeCount : other.primeCounts.entrySet()) {
                int prime = otherPrimeCount.getKey();
                Integer thisCount = this.primeCounts.get(prime);
                if(thisCount==null) thisCount = 0;
                int newCount = thisCount-otherPrimeCount.getValue();
                if(newCount == 0) {
                    this.primeCounts.remove(prime);
                } else {
                    this.primeCounts.put(prime, thisCount-otherPrimeCount.getValue());
                }
            }
            return this;
        }
    }
