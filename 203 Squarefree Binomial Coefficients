class Solution {
    static List<Integer> primes;
    
    public void main() {
        genPrimes(10000);
        // System.out.println(primes);
        // PrimeFactorization a = new PrimeFactorization(4*25*17*19);
        // PrimeFactorization b = new PrimeFactorization(5*19);
        // System.out.println(a.divide(b).primeCounts);
        
        Set<Long> squareFreeNums = new HashSet<>();
        long sfnSum = 0;
        
        for(int row = 0; row<=50; row++) {
            for(int col = 0; col<=row/2; col++) {
                PrimeFactorization nCr = new PrimeFactorization(1);
                for(int factor = 1; factor<=col; factor++) {
                    nCr.multiply(new PrimeFactorization(row-factor+1));
                    nCr.divide(new PrimeFactorization(factor));
                }
                
                if(nCr.isSquareFree()) {
                    long value = nCr.computeValue();
                    if(!squareFreeNums.contains(value)) {
                        System.out.println(value);
                        squareFreeNums.add(value);
                        sfnSum += value;
                    }
                }
            }
            // System.out.println();
        }
        System.out.println(sfnSum);
        
        return null;
    }
    
    private void genPrimes(int maxPrime) {
        primes = new ArrayList<>();
        boolean[] isComposite = new boolean[maxPrime+1];
        
        for(int testPrime = 2; testPrime<=maxPrime; testPrime++) {
            if(!isComposite[testPrime]) {
                primes.add(testPrime);
                for(int marker = testPrime*testPrime; marker<=maxPrime; marker+=testPrime) {
                    isComposite[marker] = true;
                }
            }
        }
    }
    
    private static long pow(long base, int exp) {
        int mask = 0b1000000000000000000000000000000;
        long ans = 1;
        do {
            ans = ans * ans;
            if((mask&exp) != 0) {
                ans*= base;
            }
            mask>>>=1;
        } while(mask!=0);
        
        return ans;
    }
    
    private static class PrimeFactorization {
        public Map<Integer,Integer> primeCounts;
        
        PrimeFactorization(int n) {
            primeCounts = new HashMap<>();
            
            int primeIndex = 0;
            int prime = 2;
            while(n!=1) {
                int primeCount = 0;
                while(n%prime == 0) {
                    n/=prime;
                    primeCount++;
                }
                if(primeCount>0) primeCounts.put(prime, primeCount);
                
                prime = primes.get(++primeIndex);
            }
        }
        
        public PrimeFactorization multiply(PrimeFactorization other) {
            for(Map.Entry<Integer,Integer> otherPrimeCount : other.primeCounts.entrySet()) {
                int prime = otherPrimeCount.getKey();
                Integer thisCount = this.primeCounts.get(prime);
                if(thisCount==null) thisCount = 0;
                this.primeCounts.put(prime, thisCount+otherPrimeCount.getValue());
            }
            return this;
        }
        
        public PrimeFactorization divide(PrimeFactorization other) {
            for(Map.Entry<Integer,Integer> otherPrimeCount : other.primeCounts.entrySet()) {
                int prime = otherPrimeCount.getKey();
                Integer thisCount = this.primeCounts.get(prime);
                if(thisCount==null) thisCount = 0;
                int newCount = thisCount-otherPrimeCount.getValue();
                if(newCount == 0) {
                    this.primeCounts.remove(prime);
                } else {
                    this.primeCounts.put(prime, thisCount-otherPrimeCount.getValue());
                }
            }
            return this;
        }
        
        public boolean isSquareFree() {
            for(int primeCount : primeCounts.values()) {
                if(primeCount>1) return false;
            }
            return true;
        }
        
        public long computeValue(){
            long val = 1;
            for(Map.Entry<Integer,Integer> primeCount : primeCounts.entrySet()) {
                val *= pow(primeCount.getKey(), primeCount.getValue());
            }
            return val;
        }
    }
}
